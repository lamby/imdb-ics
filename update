#!/usr/bin/env python3
#
# https://icalendar.readthedocs.io/en/latest/usage.html#example

# TODO: Parse all cinemas, then parse film info to put into the description.

import datetime
import logging
import re
import time

import click
import icalendar
import json
import pytz
import requests
import slugify
import yaml

from bs4 import BeautifulSoup
from lxml import etree
from rich.logging import RichHandler
from rich.progress import track

logging.basicConfig(
    level=logging.DEBUG, format="%(message)s", datefmt="[%X]", handlers=[RichHandler()]
)

re_runtime = re.compile(r"^(?P<hours>\d+)\s*hrs?\s+(?P<minutes>\d+)mins?$")
re_start_time = re.compile(r"^(?P<hour>\d+):(?P<minutes>\d\d)\s+(?P<period>AM|PM)$")
re_duration = re.compile(r"^PT(?P<minutes>\d+)M$")


class ImdbICS:
    PADDING = 20  # minutes
    START = datetime.date.today()
    DAYS = 14

    VENUES = [
        {
            "name": "Vue Cambridge",
            "address": "105 Grafton Centre, Cambridge CB1 1PS",
            "id": "ci0960123",
            "timezone": "Europe/London",
        },
        {
            "name": "Arts Picturehouse, Cambridge",
            "address": "38-39 St Andrew's St, Cambridge CB2 3AR",
            "id": "ci0959484",
            "timezone": "Europe/London",
        },
        {
            "name": "Grand Illusion Cinema, Seattle",
            "address": "1403 NE 50th St, Seattle WA 98105",
            "id": "ci0005472",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "The Light Cinema, Cambridge",
            "address": "Cambridge Leisure Park, Cambridge CB1 7DY",
            "id": "ci0959521",
            "timezone": "Europe/London",
        },
        {
            "name": "The Beacon, Seattle",
            "address": "4405 Rainier Ave South, Seattle WA 98118",
            "id": "ci1024213",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "Regal Bella Bottega, Redmond",
            "address": "8890 NE 161st Avenue, Redmond WA 98052",
            "id": "ci0001864",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "iPic Theaters at Redmond Town Center, Redmond",
            "address": "16451 N.E. 74th Street, Redmond WA 98052",
            "id": "ci0014968",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "AMC Pacific Place 11, Seattle",
            "address": "600 Pine S., Seattle WA 98101",
            "id": "ci0006735",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "AMC Pacific Place 12, Woodinville",
            "address": "17640 Garden Way, Woodinville WA 98072",
            "id": "ci0004663",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "SIFF Cinema Uptown, Seattle",
            "address": "511 Queen Anne Avenue North, Seattle WA 98109",
            "id": "ci16639653",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "SIFF Cinema Egyptian, Seattle",
            "address": "805 East Pine, Seattle WA 98122",
            "id": "ci60177107",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "SIFF Film Center, Seattle",
            "address": "305 Harrison Street, Seattle WA 98109",
            "id": "ci16639652",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "Cinemark Lincoln Square, Bellevue",
            "address": "700 Bellevue Way NE, Bellevue WA 98004",
            "id": "ci0014104",
            "timezone": "America/Los_Angeles",
        },
        {
            "name": "Cinemark Totem Lake, Kirkland",
            "address": "2600 120th Avenue NE, Kirkland WA 98034",
            "id": "ci1025162",
            "timezone": "America/Los_Angeles",
        },
    ]

    def __init__(self):
        self.session = requests.Session()
        self.title_info = {}  # str â†’ dict

    def main(self):
        logging.info(f"Getting info from {len(self.VENUES)} venues")

        for venue in self.VENUES:
            ics = self.get_ics(venue)

            with open(f"ics/{venue['id']}.ics", "w") as f:
                f.write(ics)

        # Write venue metadata
        with open(f"_data/venues.yaml", "w") as f:
            f.write(yaml.dump(sorted(self.VENUES, key=lambda x: x["name"])))

    def get_soup(self, url, attempts=3):
        while True:
            r = self.session.get(
                url,
                headers={
                    "User-Agent": "custom",
                    "Accept-Language": "en-US,en;q=0.9,it;q=0.8",
                },
            )

            if r.status_code == 200:
                break

            if attempts == 1:
                logging.warning(f"Out of HTTP attempts for this URL; raising error")
                r.raise_for_status()

            logging.warning(f"Did not get HTTP 200; will re-attempt after sleep")
            attempts -= 1
            time.sleep(3)

        return BeautifulSoup(r.content, "html.parser")

    def text(self, soup, pattern):
        return soup.select(pattern)[0].text.strip()

    def attr(self, soup, pattern, attr):
        return soup.select(pattern)[0][attr].strip()

    def parse_duration(self, val):
        return int(re_duration.match(val).group("minutes"))

    def populate_title_info(self, imdb_title_id):
        try:
            return self.title_info[imdb_title_id]
        except KeyError:
            pass

        logging.info(f"Getting info for IMDB title '{imdb_title_id}'...")

        url = f"https://www.imdb.com/title/{imdb_title_id}/"

        root = self.get_soup(url)
        raw = root.select_one('script[type="application/ld+json"]').text

        data = json.loads(raw)
        logging.debug(f"Downloaded info for '{data['name']}'")

        self.title_info[imdb_title_id] = data

        return self.title_info[imdb_title_id]

    def get_ics(self, venue):
        base_url = f"https://www.imdb.com/showtimes/cinema/US/{venue['id']}"
        logging.info(f"Getting info for '{venue['name']}'")

        strip_suffixes = (
            " ({})".format(datetime.date.today().year),
            " ({})".format(datetime.date.today().year - 1),
        )

        soup = self.get_soup(base_url)

        venue["address"] = "{}, {}, {}".format(
            self.text(soup, "span[itemprop=streetAddress]"),
            self.text(soup, "span[itemprop=addressLocality]"),
            self.text(soup, "span[itemprop=postalCode]"),
        )

        logging.debug(f"Found info for '{venue['name']}'")

        cal = icalendar.Calendar()
        cal.add("prodid", "-//icalendar//mxm.dk//")
        cal.add("version", "2.0")
        cal.add("name", venue["name"])
        cal.add("x-wr-calname", venue["name"])
        cal.add("last-modified", datetime.datetime.utcnow())

        num_events_venue = 0
        for idx in track(range(self.DAYS)):
            date = self.START + datetime.timedelta(days=idx)
            logging.debug(f"Generating ICS for '{venue['name']}' on {date}")

            soup = self.get_soup(
                "{}/{:04d}-{:02d}-{:02d}".format(
                    base_url,
                    date.year,
                    date.month,
                    date.day,
                )
            )

            num_events_date = 0
            for elem in soup.select(".list.detail .list_item"):
                title = self.text(elem, ".info h3")

                for needle in strip_suffixes:
                    if title.endswith(needle):
                        title = title[: -len(needle)]

                try:
                    href = self.attr(elem, ".info h3 a", "href")
                except IndexError:
                    # Some films are not on IMDB.
                    continue

                imdb_title_id = f"{href}/".split("/")[3].split("?", 1)[0]

                self.populate_title_info(imdb_title_id)

                try:
                    runtime = self.parse_duration(
                        self.attr(elem, "time[itemprop=duration]", "datetime")
                    )
                except IndexError:
                    runtime = 120

                for group in elem.select("h5.li_group"):
                    suffix = group.text.replace("Showtimes", "").strip().rstrip(":")
                    if suffix:
                        suffix = f" ({suffix})"

                    showtimes = group.findNext("div").text

                    for hour, minute in self.parse_showtimes(showtimes):
                        event = icalendar.Event()

                        uid = (
                            venue["id"],
                            imdb_title_id,
                            slugify.slugify(suffix),
                            date.year,
                            date.month,
                            date.day,
                            hour,
                            minute,
                        )

                        # Overview
                        event.add("uid", "-".join(str(x) for x in uid))
                        event.add("summary", f"{title}{suffix}")
                        event.add(
                            "location", "{}, {}".format(venue["name"], venue["address"])
                        )

                        # Calculate times
                        start = datetime.datetime(
                            year=date.year,
                            month=date.month,
                            day=date.day,
                            hour=hour,
                            minute=minute,
                            tzinfo=pytz.timezone(venue["timezone"]),
                        )
                        end = start + datetime.timedelta(
                            minutes=self.PADDING + self.round_to_nearest(runtime, 5)
                        )
                        event.add("dtstamp", start)
                        event.add("dtstart", start)
                        event.add("dtend", end)

                        # Description
                        data = self.title_info[imdb_title_id]
                        description = []
                        hours, minutes = divmod(runtime, 60)
                        description.append(
                            f"Duration: {hours}h {minutes:02d}m ({runtime} mins)"
                        )
                        try:
                            description.append(
                                data["description"].replace("&apos;", "'")
                            )
                        except KeyError:
                            pass
                        description.append(data["url"])
                        try:
                            description.append(
                                f"IMDb rating: {data['aggregateRating']['ratingValue']}"
                            )
                        except KeyError:
                            pass
                        event.add("description", "\n\n".join(description))

                        cal.add_component(event)

                        num_events_date += 1
                        num_events_venue += 1

            logging.debug(
                f"Found {num_events_date} events for {venue['name']} on {date}"
            )

        fn = logging.warning if num_events_venue == 0 else logging.debug
        fn(f"Found {num_events_venue} total events for {venue['name']}")

        return cal.to_ical().decode("utf-8")

    def round_to_nearest(self, val, nearest_to):
        return (val + (nearest_to - 1)) // nearest_to * nearest_to

    def parse_showtimes(self, val):
        val = val.replace("Get Tickets", "")

        hour_offset = 0

        for x in val.split("|"):
            x = x.strip()

            if x.endswith("pm"):
                hour_offset = 12

            hour, minute = [int(y) for y in x.split(" ", 1)[0].split(":", 1)]

            if hour_offset == 0 and hour == 12:
                hour = 0

            if hour < 12:
                hour += hour_offset

            yield hour, minute


@click.command()
def main():
    ImdbICS().main()


if __name__ == "__main__":
    main()
